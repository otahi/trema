#!/usr/bin/env ruby
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'drb/drb'
require 'gli'
require 'phut'
require 'rake'
require 'trema'

ENV['GLI_DEBUG'] = 'true'

# OpenFlow controller framework.
module Trema
  # trema command.
  module App
    extend GLI::App

    desc 'Displays the current runtime version'
    program_desc 'Trema command-line tool'

    version Trema::VERSION

    desc 'Be verbose'
    switch [:v, :verbose], negatable: false

    desc 'Runs a trema application'
    arg_name 'controller'
    command :run do |c|
      c.desc 'Runs as a daemon'
      c.switch [:d, :daemonize], negatable: false
      c.desc 'Specifies emulated network configuration'
      c.flag [:c, :conf]
      c.desc 'Use OpenFlow1.3'
      c.switch :openflow13, default_value: false

      c.desc 'Location to put pid files'
      c.flag [:P, :pid_dir], default_value: Trema::DEFAULT_PID_DIR
      c.desc 'Location to put log files'
      c.flag [:L, :log_dir], default_value: Trema::DEFAULT_LOG_DIR
      c.desc 'Location to put socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |global_options, options, args|
        Phut.pid_dir = options[:pid_dir]
        Phut.log_dir = options[:log_dir]
        Phut.socket_dir = options[:socket_dir]
        require 'pio/open_flow13' if options[:openflow13]
        require 'trema/switch'
        Trema::Command.new.run(args, global_options.merge(options))
      end
    end

    desc 'Print all flow entries'
    arg_name 'switches...'
    command :dump_flows do |c|
      c.desc 'Location to put socket files'
      c.flag [:S, :socket_dir], default_value: Phut.socket_dir

      c.action do |_global_options, options, args|
        args.each do |each|
          puts(Trema.trema_process(options[:socket_dir]).fetch(each).dump_flows)
        end
      end
    end

    desc 'Sends UDP packets to destination host'
    command :send_packets do |c|
      c.desc 'host that sends packets'
      c.flag [:s, :source]
      c.desc 'host that receives packets'
      c.flag [:d, :dest]
      c.desc 'number of packets to send'
      c.flag [:n, :npackets], default_value: 1

      c.desc 'Location to put socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, _args|
        fail '--source option is mandatory' if options[:source].nil?
        fail '--dest option is mandatory' if options[:dest].nil?
        dest =
          Trema.trema_process(options[:socket_dir]).fetch(options.fetch(:dest))
        Phut::VhostDaemon.
          process(options.fetch(:source), options.fetch(:socket_dir)).
          send_packets(dest, options.fetch(:npackets).to_i)
      end
    end

    desc 'Shows stats of packets'
    arg_name 'host'
    command :show_stats do |c|
      c.desc 'Location to find socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, args|
        help_now!('host is required') if args.empty?

        stats = Phut::VhostDaemon.process(args[0], options[:socket_dir]).stats

        dests = stats[:tx].map { |each| each.ip_destination_address.to_s }.uniq
        txstats = dests.map do |each|
          all = stats[:tx].select { |pkt| pkt.ip_destination_address == each }
          "#{all.first.ip_source_address} -> #{each} = " \
          "#{all.size} packet#{all.size > 1 ? 's' : ''}"
        end
        unless txstats.empty?
          puts 'Packets sent:'
          txstats.each { |each| puts "  #{each}" }
        end

        sources = stats[:rx].map { |each| each.ip_source_address.to_s }.uniq
        rxstats = sources.map do |each|
          all = stats[:rx].select { |pkt| pkt.ip_source_address == each }
          "#{each} -> #{all.first.ip_destination_address} = " \
          "#{all.size} packet#{all.size > 1 ? 's' : ''}"
        end
        unless rxstats.empty?
          puts 'Packets received:'
          rxstats.each { |each| puts "  #{each}" }
        end
      end
    end

    desc "Brings a switch's specified port up"
    command :port_up do |c|
      c.desc 'switch name'
      c.flag [:s, :switch]
      c.desc 'port'
      c.flag [:p, :port]
      c.desc 'Location to put socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, _args|
        fail '--switch option is mandatory' if options[:switch].nil?
        fail '--port option is mandatory' if options[:port].nil?
        Trema.trema_process(options[:socket_dir]).
          port_up(options[:switch], options[:port].to_i)
      end
    end

    desc "Brings a switch's specified port down"
    command :port_down do |c|
      c.desc 'switch name'
      c.flag [:s, :switch]
      c.desc 'port'
      c.flag [:p, :port]
      c.desc 'Location to put socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, _args|
        fail '--switch option is mandatory' if options[:switch].nil?
        fail '--port option is mandatory' if options[:port].nil?
        Trema.trema_process(options[:socket_dir]).
          port_down(options[:switch], options[:port].to_i)
      end
    end

    desc 'Terminates a trema process'
    arg_name 'name'
    command :kill do |c|
      c.desc 'Location to find socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, args|
        help_now!('name is required') if args.empty?
        args.each do |each|
          Trema.trema_process(options[:socket_dir]).kill each
        end
      end
    end

    desc 'Deletes a virtual link'
    arg_name 'endpoint1 endpoint2'
    command :delete_link do |c|
      c.desc 'Location to find socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, args|
        help_now!('endpoint1 and endpoint2 is required') if args.size < 2
        args.each do |_each|
          Trema.trema_process(options[:socket_dir]).delete_link(*args)
        end
      end
    end

    desc 'Starts a killed trema process again'
    arg_name 'name'
    command :up do |c|
      c.desc 'Location to find socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, args|
        args.each do |each|
          Trema.trema_process(options[:socket_dir]).up each
        end
      end
    end

    desc 'Terminates all trema processes'
    command :killall do |c|
      c.desc 'Location to put socket files'
      c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

      c.action do |_global_options, options, _args|
        begin
          Trema.trema_process(options[:socket_dir], true).killall
        rescue DRb::DRbConnError
          true # OK (trema process exitted).
        end
      end
    end

    default_command :help

    exit run(ARGV)
  end
end
